// SPDX-License-Identifier: GPL-2.0-or-later

pragma solidity ^0.8.23;

import {IEVC} from "ethereum-vault-connector/interfaces/IEthereumVaultConnector.sol";
import {EVaultTestBase} from "evk-test/unit/evault/EVaultTestBase.t.sol";
import {IEVault, IERC4626, IERC20} from "evk/EVault/IEVault.sol";

import {ISwapper} from "../../src/Swaps/ISwapper.sol";
import {Swapper} from "../../src/Swaps/Swapper.sol";
import {SwapVerifier} from "../../src/Swaps/SwapVerifier.sol";

import "forge-std/Test.sol";

/// @notice The tests operate on a fork. Create a .env file with FORK_RPC_URL as per fondry docs
contract SwapsPendle is EVaultTestBase {
    uint256 mainnetFork;
    Swapper constant swapper = Swapper(0x9b2583d98fb39aA675CAA33b81EfbD539Bdf276c);
    SwapVerifier constant swapVerifier = SwapVerifier(0xae26485ACDDeFd486Fe9ad7C2b34169d360737c7);

    address constant pendleRouterV4 = 0x888888888889758F76e7103c6CbF23ABbF58F946;
    address constant uniswapRouterV2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
    address constant uniswapRouterV3 = 0xE592427A0AEce92De3Edee1F18E0157C05861564;


    address constant PT_SUSDE = 0xEe9085fC268F6727d5D4293dBABccF901ffDCC29;
    address constant USDE = 0x4c9EDD5852cd905f086C759E8383e09bff1E68B3;
    address constant SUSDE = 0x9D39A5DE30e57443BfF2A8307A4256c8797A3497;
    address constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;

    uint256 internal constant MODE_EXACT_IN = 0;
    uint256 internal constant MODE_EXACT_OUT = 1;
    uint256 internal constant MODE_TARGET_DEBT = 2;
    uint256 internal constant MODE_INVALID = 3;

    string FORK_RPC_URL = vm.envOr("FORK_RPC_URL", string(""));

    address user;
    address user2;

    IEVault ePT_SUSDE;
    IEVault eUSDE;
    IEVault eSUSDE;
    IEVault eWBTC;

    uint256 internal constant blockNumber_PT_SUSDE_TO_USDE = 20943862;
    bytes internal constant payload_PT_SUSDE_TO_USDE = hex"594a88cc00000000000000000000000076006c4471fb6add17728e9c9c8b67d5af06cda0000000000000000000000000a0ab94debb3cc9a7ea77f3205ba4ab23276fed0800000000000000000000000000000000000000000000152d02c7e14af680000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000bc00000000000000000000000004c9edd5852cd905f086c759e8383e09bff1e68b3000000000000000000000000000000000000000000001397d894690fbc46a7720000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a34970000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000009c4e21fd0e90000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000007400000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a34970000000000000000000000004c9edd5852cd905f086c759e8383e09bff1e68b3000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000867b321132b18b5bf3775c0d9040d1872979422e0000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000012ad19be5d2a92f64ce500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000435664008f38b0650fbc1c9fc971d0a3bc2f1e47000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000004c9edd5852cd905f086c759e8383e09bff1e68b300000000000000000000000000000000000000000000000000000016a74bb2c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000015a04fb26e3ef57000000000000149fd681462b82d11c0d0000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a34970000000000000000000000004c9edd5852cd905f086c759e8383e09bff1e68b3000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000000000000000000000000012ad19be5d2a92f64ce5000000000000000000000000000000000000000000001397d894690fbc46a772000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd6700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000012ad19be5d2a92f64ce500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002307b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a2239373331362e3739303935363436393033222c22416d6f756e744f7574555344223a2239373335352e303336343833373336222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a223937333935383138363737363631353237353134313235222c2254696d657374616d70223a313732383636373135372c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224d59712f69476c63392f5775674f59715368384c635632394c6b7731316c5a672b676d57694a57314b68484935635954547746717a355251576e6577397362334f3245305a6a4968626e2b4a7253795579694c44517343487a5a5632596557504d722f734865387445446b596b4e6b4f436769673934423043575534554d62787a7448344b326854305439396f587a544150622b6a6b2f534b6d6a73645369596947694e7038387770546e58795a336d4e326c4f347131556379674c5451796b614c4530646b57314a503132414d6a4558535537393433635035696a48395749426e6e6f753870384e647149303336386172414330694a635979646d2f3139654466784738624a617a364a59672b78507a5473764e4247457153423871474d4c71536b497a626650583654592f536247534f3070515775593976464f374b61542b67516c61596f35626a6b497a4a6670336149476f673d3d227d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    uint256 internal constant blockNumber_PT_SUSDE_TO_WBTC = 20948142;
    bytes internal constant payload_PT_SUSDE_TO_WBTC = hex"";

    uint256 internal constant blockNumber_SUSDE_TO_PT_SUSDE = 20948317;
    bytes internal constant payload_SUSDE_TO_PT_SUSDE = hex"c81f847a0000000000000000000000003c8ca53ee5661d29d3d3c0732689a4b86947eaf0000000000000000000000000a0ab94debb3cc9a7ea77f3205ba4ab23276fed080000000000000000000000000000000000000000000016c866c04550fa84f2ad000000000000000000000000000000000000000000000bfdaf57b8b15b6e64c7000000000000000000000000000000000000000000001dfa365b4dbb6493fbf10000000000000000000000000000000000000000000017fb5eaf7162b6dcc98e000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002800000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a349700000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    uint256 internal constant blockNumber_WBTC_TO_PT_SUSDE = 20948458;
    bytes internal constant payload_WBTC_TO_PT_SUSDE = hex"c81f847a0000000000000000000000003c8ca53ee5661d29d3d3c0732689a4b86947eaf0000000000000000000000000a0ab94debb3cc9a7ea77f3205ba4ab23276fed08000000000000000000000000000000000000000000000ce6c47494c23822e84b0000000000000000000000000000000000000000000006ca4c7340d202991bf20000000000000000000000000000000000000000000010f9bf20220d067ec5dd000000000000000000000000000000000000000000000d9498e681a4053237e4000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000018800000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a34970000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015e4e21fd0e90000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000112000000000000000000000000000000000000000000000000000000000000013600000000000000000000000000000000000000000000000000000000000001060000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000000000000000000000000000000000000000000b200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000e6ff8b9a37b0fab776134636d9981aa778c4e7180000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000001ba8140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040ca6182da00000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000007a819fa46734a49d0112796f9377e024c350fb260000000000000000000000000000000000000000670a392df9a1eca125451f4a000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000807cf9a772d5a3f9cefbc1192e939d62f0d9bd3800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000439a651cb000000000000000000000000000000000000000000000000670041f9769c01060000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000670041f9769c0106000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd6700000000000000000000000000000000000000000000000000000000000000414210ad54b2ad3542d76e6d7eb3108cd0a8ca407d107f2fdb0cd78bd2004f38c547329982f48777c7de646651f14ab36d9f2fcd45a9b2dc91e5c363e85fdf84ed1c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000867b321132b18b5bf3775c0d9040d1872979422e000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a34970000000000000000000000000000000000000000000000000000000439a651cb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd670000000000000000000000009a772018fbd77fcd2d25657e5c547baff3fd7d160000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000006acfc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040ca6182da00000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000007a819fa46734a49d0112796f9377e024c350fb260000000000000000000000000000000000000000670a392d1dc1618d54a4ee4b000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000807cf9a772d5a3f9cefbc1192e939d62f0d9bd38000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001051ad7ed000000000000000000000000000000000000000000000000000000010510b8540000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000010510b854000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd6700000000000000000000000000000000000000000000000000000000000000412895c61018709df3de3471d5745f7a81e657522e4b4c65e48f5850b5c69bec516e8f561d45155460e3f34c625cc2fd4e3376fb0244079da77ee7b072e38bc6051c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000867b321132b18b5bf3775c0d9040d1872979422e000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a349700000000000000000000000000000000000000000000000000000001051ad7ed000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000040ca6182da00000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000007a819fa46734a49d0112796f9377e024c350fb260000000000000000000000000000000000000000670a392e5b9048caccf1fac4000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000807cf9a772d5a3f9cefbc1192e939d62f0d9bd380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000095148958f0000000000000000000000000000000000000000000000000000000003d0900000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000003d09000000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd6700000000000000000000000000000000000000000000000000000000000000414b57a39c41c32ad040cd70d1d8a8b7445188f57835334f93fbd3ef781ef15cd6597b38fa719177c028216db39fc8bac47c5263e233906a6a825ede191d1ab3c61c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004063407a490000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd67000000000000000000000000867b321132b18b5bf3775c0d9040d1872979422e000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000000000000000000000000000000000095148958f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000c92aff7e93c4b90000000000000bfd9459092a4486b4d10000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a3497000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000b6419bafbe8277ff893000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f081470f5c6fbccf48cc4e5b82dd926409dcdd6700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002327b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a2236323633312e3731383936313139383731222c22416d6f756e744f7574555344223a2236323733342e3930373232383231363335222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a223536363233373437313437343832323937343437363333222c2254696d657374616d70223a313732383732333230312c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a225947683576324e37436a564378657a4c383956542f66446234353447564d4a37767a706b724f7665557a33785861574f2b616444397039547049394934615530496356746b555a45393965522f54784c47423755516a7866384457544539752b633278526164635a79442f7967564a596e4e667046675a2b5146734e46302f566f712b51797661746b46514d2b573867447579334a6636433172662f79616272367a69494d3767342f335157447a6f7130656a32425968653131625763426776354d5358753173696c516f6f6a4b5077454c43724d3338617a3478474d6475384c713555324c33324b454b455066756742325551396377456965487659684e7368307a7942336a43427a334875567650385150542f2f672b4a394b5079784a742f326f76443657636f786555504f35434e5448465a474331326e6e654456764968624f4c497a6a4846764155676f54416865327161773d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    function setUp() public virtual override {
        super.setUp();

        user = makeAddr("user");
        user2 = makeAddr("user2");

        if (bytes(FORK_RPC_URL).length != 0) {
            mainnetFork = vm.createSelectFork(FORK_RPC_URL);
        }
    }

    function setupFork(uint256 blockNumber) internal {
        vm.skip(bytes(FORK_RPC_URL).length == 0);
        vm.rollFork(blockNumber);

        ePT_SUSDE = IEVault(factory.createProxy(address(0), true, abi.encodePacked(PT_SUSDE, address(oracle), unitOfAccount)));
        eUSDE = IEVault(factory.createProxy(address(0), true, abi.encodePacked(USDE, address(oracle), unitOfAccount)));
        eWBTC = IEVault(factory.createProxy(address(0), true, abi.encodePacked(WBTC, address(oracle), unitOfAccount)));
        eSUSDE = IEVault(factory.createProxy(address(0), true, abi.encodePacked(SUSDE, address(oracle), unitOfAccount)));
        vm.assertEq(address(eUSDE), 0x76006C4471fb6aDd17728e9c9c8B67d5AF06cDA0); // must match the payload
        vm.assertEq(address(eWBTC), 0x6891e60906DEBeA401F670D74d01D117a3bEAD39); // must match the payload
        vm.assertEq(address(ePT_SUSDE), 0x3C8Ca53ee5661D29d3d3C0732689a4b86947EAF0); // must match the payload
        vm.assertEq(address(eSUSDE), 0x1fee48ED5BD602834114e19c1a3355b0d20Ea0Df); // must match the payload

        ePT_SUSDE.setHookConfig(address(0), 0);
        eUSDE.setHookConfig(address(0), 0);
        eSUSDE.setHookConfig(address(0), 0);
        eWBTC.setHookConfig(address(0), 0);

        startHoax(user);
        deal(PT_SUSDE, user, 200_000e18);
        IERC20(PT_SUSDE).approve(address(ePT_SUSDE), type(uint256).max);
        ePT_SUSDE.deposit(type(uint256).max, user);

        startHoax(user2);
        deal(SUSDE, user2, 200_000e18);
        IERC20(SUSDE).approve(address(eSUSDE), type(uint256).max);
        eSUSDE.deposit(type(uint256).max, user2);
    }

    function test_swapPendle_PTForUnderlyingNonYieldBearing() external {
        setupFork(blockNumber_PT_SUSDE_TO_USDE);
        startHoax(user);

        IEVC.BatchItem[] memory items = new IEVC.BatchItem[](3);

        items[0] = IEVC.BatchItem({
            onBehalfOfAccount: user,
            targetContract: address(ePT_SUSDE),
            value: 0,
            data: abi.encodeCall(IERC4626.withdraw, (100_000e18, address(swapper), user))
        });

        items[1] = IEVC.BatchItem({
            onBehalfOfAccount: user,
            targetContract: address(swapper),
            value: 0,
            data: abi.encodeCall(
                Swapper.swap,
                ISwapper.SwapParams({
                    handler: swapper.HANDLER_GENERIC(),
                    mode: MODE_EXACT_IN,
                    account: address(0), // ignored
                    tokenIn: PT_SUSDE,
                    tokenOut: USDE,
                    amountOut: 0, // ignored
                    vaultIn: address(0), // ignored
                    accountIn: address(0), // ignored
                    receiver: address(0), // ignored
                    data: abi.encode(pendleRouterV4, payload_PT_SUSDE_TO_USDE)
                })
            )
        });

        items[2] = IEVC.BatchItem({
            onBehalfOfAccount: user,
            targetContract: address(swapVerifier),
            value: 0,
            data: abi.encodeCall(swapVerifier.verifyAmountMinAndSkim, (address(eUSDE), user, 1, type(uint256).max))
        });

        evc.batch(items);

        // vaults
        assertEq(ePT_SUSDE.totalSupply(), 200_000e18 - 100_000e18);
        assertEq(ePT_SUSDE.totalAssets(), 200_000e18 - 100_000e18);
        assertEq(eUSDE.totalSupply(), 97395.882761275949799665e18);
        assertEq(eUSDE.totalAssets(), 97395.882761275949799665e18);

        // account
        assertEq(ePT_SUSDE.balanceOf(user), 200_000e18 - 100_000e18);
        assertEq(ePT_SUSDE.maxWithdraw(user), 200_000e18 - 100_000e18);
        assertEq(eUSDE.balanceOf(user), 97395.882761275949799665e18);
        assertEq(eUSDE.maxWithdraw(user), 97395.882761275949799665e18);

        // swapper
        assertEq(IERC20(PT_SUSDE).balanceOf(address(swapper)), 0);
        assertEq(IERC20(USDE).balanceOf(address(swapper)), 0);
    }


    function test_swapPendle_PTForOtherToken() external {
        setupFork(blockNumber_PT_SUSDE_TO_WBTC);
        startHoax(user);

        IEVC.BatchItem[] memory items = new IEVC.BatchItem[](3);

        items[0] = IEVC.BatchItem({
            onBehalfOfAccount: user,
            targetContract: address(ePT_SUSDE),
            value: 0,
            data: abi.encodeCall(IERC4626.withdraw, (100_000e18, address(swapper), user))
        });

        items[1] = IEVC.BatchItem({
            onBehalfOfAccount: user,
            targetContract: address(swapper),
            value: 0,
            data: abi.encodeCall(
                Swapper.swap,
                ISwapper.SwapParams({
                    handler: swapper.HANDLER_GENERIC(),
                    mode: MODE_EXACT_IN,
                    account: address(0), // ignored
                    tokenIn: PT_SUSDE,
                    tokenOut: WBTC,
                    amountOut: 0, // ignored
                    vaultIn: address(0), // ignored
                    accountIn: address(0), // ignored
                    receiver: address(0), // ignored
                    data: abi.encode(pendleRouterV4, payload_PT_SUSDE_TO_WBTC)
                })
            )
        });

        items[2] = IEVC.BatchItem({
            onBehalfOfAccount: user,
            targetContract: address(swapVerifier),
            value: 0,
            data: abi.encodeCall(swapVerifier.verifyAmountMinAndSkim, (address(eWBTC), user, 1, type(uint256).max))
        });

        evc.batch(items);

        // vaults
        assertEq(ePT_SUSDE.totalSupply(), 200_000e18 - 100_000e18);
        assertEq(ePT_SUSDE.totalAssets(), 200_000e18 - 100_000e18);
        assertEq(eWBTC.totalSupply(), 1.55099757e8);
        assertEq(eWBTC.totalAssets(), 1.55099757e8);

        // account
        assertEq(ePT_SUSDE.balanceOf(user), 200_000e18 - 100_000e18);
        assertEq(ePT_SUSDE.maxWithdraw(user), 200_000e18 - 100_000e18);
        assertEq(eWBTC.balanceOf(user), 1.55099757e8);
        assertEq(eWBTC.maxWithdraw(user), 1.55099757e8);

        // swapper
        assertEq(IERC20(PT_SUSDE).balanceOf(address(swapper)), 0);
        assertEq(IERC20(WBTC).balanceOf(address(swapper)), 0);
    }

    function test_swapPendle_UnderlyingForPT() external {
        setupFork(blockNumber_PT_SUSDE_TO_USDE);
        startHoax(user2);

        IEVC.BatchItem[] memory items = new IEVC.BatchItem[](3);

        items[0] = IEVC.BatchItem({
            onBehalfOfAccount: user2,
            targetContract: address(eSUSDE),
            value: 0,
            data: abi.encodeCall(IERC4626.withdraw, (100_000e18, address(swapper), user2))
        });

        items[1] = IEVC.BatchItem({
            onBehalfOfAccount: user2,
            targetContract: address(swapper),
            value: 0,
            data: abi.encodeCall(
                Swapper.swap,
                ISwapper.SwapParams({
                    handler: swapper.HANDLER_GENERIC(),
                    mode: MODE_EXACT_IN,
                    account: address(0), // ignored
                    tokenIn: SUSDE,
                    tokenOut: PT_SUSDE,
                    amountOut: 0, // ignored
                    vaultIn: address(0), // ignored
                    accountIn: address(0), // ignored
                    receiver: address(0), // ignored
                    data: abi.encode(pendleRouterV4, payload_SUSDE_TO_PT_SUSDE)
                })
            )
        });

        items[2] = IEVC.BatchItem({
            onBehalfOfAccount: user2,
            targetContract: address(swapVerifier),
            value: 0,
            data: abi.encodeCall(swapVerifier.verifyAmountMinAndSkim, (address(ePT_SUSDE), user2, 1, type(uint256).max))
        });

        evc.batch(items);

        // vaults
        assertEq(eSUSDE.totalSupply(), 200_000e18 - 100_000e18);
        assertEq(eSUSDE.totalAssets(), 200_000e18 - 100_000e18);
        assertEq(ePT_SUSDE.totalSupply(), 200_000e18 + 113304.091074316275258073e18);
        assertEq(ePT_SUSDE.totalAssets(), 200_000e18 + 113304.091074316275258073e18);

        // account
        assertEq(eSUSDE.balanceOf(user2), 200_000e18 - 100_000e18);
        assertEq(eSUSDE.maxWithdraw(user2), 200_000e18 - 100_000e18);
        assertEq(ePT_SUSDE.balanceOf(user2), 113304.091074316275258073e18);
        assertEq(ePT_SUSDE.maxWithdraw(user2), 113304.091074316275258073e18);

        // swapper
        assertEq(IERC20(SUSDE).balanceOf(address(swapper)), 0);
        assertEq(IERC20(PT_SUSDE).balanceOf(address(swapper)), 0);
    }

    function test_swapPendle_OtherTokenForPT() external {
        setupFork(blockNumber_PT_SUSDE_TO_USDE);
        startHoax(user2);

        deal(WBTC, user2, 2e8);
        IERC20(WBTC).approve(address(eWBTC), type(uint256).max);
        eWBTC.deposit(type(uint256).max, user2);

        IEVC.BatchItem[] memory items = new IEVC.BatchItem[](3);

        items[0] = IEVC.BatchItem({
            onBehalfOfAccount: user2,
            targetContract: address(eWBTC),
            value: 0,
            data: abi.encodeCall(IERC4626.withdraw, (1e8, address(swapper), user2))
        });

        items[1] = IEVC.BatchItem({
            onBehalfOfAccount: user2,
            targetContract: address(swapper),
            value: 0,
            data: abi.encodeCall(
                Swapper.swap,
                ISwapper.SwapParams({
                    handler: swapper.HANDLER_GENERIC(),
                    mode: MODE_EXACT_IN,
                    account: address(0), // ignored
                    tokenIn: WBTC,
                    tokenOut: PT_SUSDE,
                    amountOut: 0, // ignored
                    vaultIn: address(0), // ignored
                    accountIn: address(0), // ignored
                    receiver: address(0), // ignored
                    data: abi.encode(pendleRouterV4, payload_WBTC_TO_PT_SUSDE)
                })
            )
        });

        items[2] = IEVC.BatchItem({
            onBehalfOfAccount: user2,
            targetContract: address(swapVerifier),
            value: 0,
            data: abi.encodeCall(swapVerifier.verifyAmountMinAndSkim, (address(ePT_SUSDE), user2, 1, type(uint256).max))
        });

        evc.batch(items);

        // vaults
        assertEq(eWBTC.totalSupply(), 2e8 - 1e8);
        assertEq(eWBTC.totalAssets(), 2e8 - 1e8);
        assertEq(ePT_SUSDE.totalSupply(), 200_000e18 + 64039.913973620143574896e18);
        assertEq(ePT_SUSDE.totalAssets(), 200_000e18 + 64039.913973620143574896e18);

        // account
        assertEq(eWBTC.balanceOf(user2), 2e8 - 1e8);
        assertEq(eWBTC.maxWithdraw(user2), 2e8 - 1e8);
        assertEq(ePT_SUSDE.balanceOf(user2), 64039.913973620143574896e18);
        assertEq(ePT_SUSDE.maxWithdraw(user2), 64039.913973620143574896e18);

        // swapper
        assertEq(IERC20(WBTC).balanceOf(address(swapper)), 0);
        assertEq(IERC20(PT_SUSDE).balanceOf(address(swapper)), 0);
    }
}
